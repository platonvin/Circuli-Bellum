#version 450

precision highp float;
precision highp int;

layout(binding = 0, set = 0) uniform restrict readonly UniformBufferObject {
    vec2 camera_pos;
    vec2 camera_scale;
    ivec2 resolution;
    float time;
} ubo;
layout(set = 1, binding = 0, rgba16) uniform image2D bloom_low;
layout(set = 1, binding = 1) uniform sampler2D bloom_high;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

//from learnopengl
void main(){
    vec2 pix = gl_GlobalInvocationID.xy;
    // vec4 old_high = imageLoad(bloom_high, ivec2(pix)); 
        vec2 size = imageSize(bloom_low);
        vec2 _size = textureSize(bloom_high,0);
        // vec2 uv = ((pix)*1.0) / (size);
        vec2 uv = ((pix+0.5)) / (size);
    // vec4 low = textureLod(bloom_low, uv, 0); 
    // vec4 new_high = (old_high*0.05 + low*0.95); 
    // vec4 new_high = mix(old_high,low,0.5); 

    vec2 texCoord = uv;
    // vec2 srcTexelSize = 1.0 / vec2(ubo.resolution);
    // vec2 srcTexelSize = (1.0 / vec2(size))/2.0;
    vec2 srcTexelSize = (1.0 / vec2(_size));
    float x = srcTexelSize.x;
    float y = srcTexelSize.y;

    // Take 13 samples around current texel:
    // a - b - c
    // - j - k -
    // d - e - f
    // - l - m -
    // g - h - i
    // === ('e' is the current texel) ===
    vec3 a = texture(bloom_high, vec2(texCoord.x - 2*x, texCoord.y + 2*y)).rgb;
    vec3 b = texture(bloom_high, vec2(texCoord.x,       texCoord.y + 2*y)).rgb;
    vec3 c = texture(bloom_high, vec2(texCoord.x + 2*x, texCoord.y + 2*y)).rgb;

    vec3 d = texture(bloom_high, vec2(texCoord.x - 2*x, texCoord.y)).rgb;
    vec3 e = texture(bloom_high, vec2(texCoord.x,       texCoord.y)).rgb;
    vec3 f = texture(bloom_high, vec2(texCoord.x + 2*x, texCoord.y)).rgb;

    vec3 g = texture(bloom_high, vec2(texCoord.x - 2*x, texCoord.y - 2*y)).rgb;
    vec3 h = texture(bloom_high, vec2(texCoord.x,       texCoord.y - 2*y)).rgb;
    vec3 i = texture(bloom_high, vec2(texCoord.x + 2*x, texCoord.y - 2*y)).rgb;

    vec3 j = texture(bloom_high, vec2(texCoord.x - x, texCoord.y + y)).rgb;
    vec3 k = texture(bloom_high, vec2(texCoord.x + x, texCoord.y + y)).rgb;
    vec3 l = texture(bloom_high, vec2(texCoord.x - x, texCoord.y - y)).rgb;
    vec3 m = texture(bloom_high, vec2(texCoord.x + x, texCoord.y - y)).rgb;

    // Apply weighted distribution:
    // 0.5 + 0.125 + 0.125 + 0.125 + 0.125 = 1
    // a,b,d,e * 0.125
    // b,c,e,f * 0.125
    // d,e,g,h * 0.125
    // e,f,h,i * 0.125
    // j,k,l,m * 0.5
    // This shows 5 square areas that are being sampled. But some of them overlap,
    // so to have an energy preserving downsample we need to make some adjustments.
    // The weights are the distributed, so that the sum of j,k,l,m (e.g.)
    // contribute 0.5 to the final color output. The code below is written
    // to effectively yield this sum. We get:
    // 0.125*5 + 0.03125*4 + 0.0625*4 = 1
    vec3 downsample; 
    downsample = e*0.125;
    downsample += (a+c+g+i)*0.03125;
    downsample += (b+d+f+h)*0.0625;
    downsample += (j+k+l+m)*0.125;

    imageStore(bloom_low, ivec2(pix), vec4(downsample,1)); 
}