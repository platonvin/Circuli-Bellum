#version 450

precision highp float;
precision highp int;

layout(binding = 0, set = 0) uniform restrict readonly UniformBufferObject {
    vec2 camera_pos;
    vec2 camera_scale;
    ivec2 resolution;
    float time;
} ubo;
layout(set = 1, binding = 0) uniform sampler2D bloom_low;
layout(set = 1, binding = 1, rgba16) uniform image2D bloom_high;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

//from learnopengl
void main(){
    vec2 pix = gl_GlobalInvocationID.xy;
    vec4 old_high = imageLoad(bloom_high, ivec2(pix)); 
        vec2 low_size = textureSize(bloom_low,0);
        vec2 uv = ((pix+0.5)/2.0) / (low_size);
    // vec4 low = textureLod(bloom_low, uv, 0); 
    // vec4 new_high = (old_high*0.05 + low*0.95); 
    // vec4 new_high = mix(old_high,low,0.5); 

    // float filterRadius = 
    // The filter kernel is applied with a radius, specified in texture
    // coordinates, so that the radius will vary across mip resolutions.
    float x = 1.0 / (low_size.x);
    float y = 1.0 / (low_size.x);
    vec2 texCoord = uv;

    // Take 9 samples around current texel:
    // a - b - c
    // d - e - f
    // g - h - i
    // === ('e' is the current texel) ===
    vec3 a = texture(bloom_low, vec2(texCoord.x - x, texCoord.y + y)).rgb;
    vec3 b = texture(bloom_low, vec2(texCoord.x,     texCoord.y + y)).rgb;
    vec3 c = texture(bloom_low, vec2(texCoord.x + x, texCoord.y + y)).rgb;

    vec3 d = texture(bloom_low, vec2(texCoord.x - x, texCoord.y)).rgb;
    vec3 e = texture(bloom_low, vec2(texCoord.x,     texCoord.y)).rgb;
    vec3 f = texture(bloom_low, vec2(texCoord.x + x, texCoord.y)).rgb;

    vec3 g = texture(bloom_low, vec2(texCoord.x - x, texCoord.y - y)).rgb;
    vec3 h = texture(bloom_low, vec2(texCoord.x,     texCoord.y - y)).rgb;
    vec3 i = texture(bloom_low, vec2(texCoord.x + x, texCoord.y - y)).rgb;

    // Apply weighted distribution, by using a 3x3 tent filter:
    //  1   | 1 2 1 |
    // -- * | 2 4 2 |
    // 16   | 1 2 1 |
    vec3 upsample;
    upsample = e*4.0;
    upsample += (b+d+f+h)*2.0;
    upsample += (a+c+g+i);
    upsample *= 1.0 / 16.0;
 
    imageStore(bloom_high, ivec2(pix), mix(vec4(upsample,1),old_high,0.5)); 
    // imageStore(bloom_high, ivec2(pix), new_high); 
}
